{$H-}
{$I types.pas}
{$I paletteColors.pas}
{$I misc.pas}

type
  TSlackGUI = record
    Width, Height: Int32;

    Form: TForm;
    Image: TImage;
    Timer: TTimer;
    
    Palette: array [0..12] of Int32;
    
    FocusObject: TFormObject;
    HoverObject: TFormObject;

    ObjectCount: Int32;
    Objects: array of TFormObject;

    Images: array of record
      Image: TPicture;
      Path: string;
    end;
  end;


var
  SlackGUI: TSlackGUI;

{$IFNDEF CODEINSIGHT}
begin
  SlackGUI.Width   := 800;
  SlackGUI.Height  := 600;
  SlackGUI.Palette := DARK_NEUTRAL;
end;
{$ENDIF}

{$I callbacks.pas}
{$I object.pas}
{$I drawing.pas}
{$I objectproperties.pas}
{$I rendering.pas}


// -----------------------------------------------------------------------------
// GUI EVENT PROCESSING

function TSlackGUI.FindObjectNear(X,Y: Int32; Obj: TFormObject): TFormObject; static;
var
  i: Int32;
  tmp: TFormObject;
begin
  Result := nil;
  if not Obj^.IsVisible then
    Exit;

  if PointInBox(Point(X,Y), TBox(obj.Bounds)) then
    Result := Obj;

  for i:=0 to High(Obj^.Children) do
  begin
    tmp := FindObjectNear(X,Y, Obj^.Children[i]);
    if (tmp <> nil) then
      Result := tmp;
  end;
end;

procedure TSlackGUI.ProcessMouseDownEvent(_, Sender: TObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
var
  Obj: TFormObject;
begin
  if (SlackGUI.ObjectCount <= 0) then Exit;

  Obj := SlackGUI.FindObjectNear(X,Y, SlackGUI.Objects[0]);
  if Obj = nil then Exit;

  if (@Obj^.__OnMouseDown <> nil) then
  begin
    SlackGUI.FocusObject := Obj;
    Obj^.__OnMouseDown(Obj, Button, Shift, X,Y);
  end;
end;

procedure TSlackGUI.ProcessMouseUpEvent(_, Sender: TObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
var
  Obj: TFormObject;
begin
  if (SlackGUI.ObjectCount <= 0) then Exit;

  if (SlackGUI.FocusObject = nil) then
  begin
    Obj := SlackGUI.FindObjectNear(X,Y, SlackGUI.Objects[0]);
    if Obj = nil then Exit;

    if (@Obj^.__OnMouseUp <> nil) then
      Obj^.__OnMouseUp(Obj, Button, Shift, X,Y);
  end else
  begin
    if (@SlackGUI.FocusObject^.__OnMouseUp <> nil) and (PointInBox(Point(X,Y), TBox(SlackGUI.FocusObject.Bounds))) then
      SlackGUI.FocusObject^.__OnMouseUp(SlackGUI.FocusObject, Button, Shift, X,Y);
  end;
end;

procedure TSlackGUI.ProcessMouseMoveEvent(_, Sender: TObject; Shift: TShiftState; X,Y: Int32); static;
var
  Obj: TFormObject;
begin
  if (SlackGUI.ObjectCount <= 0) then Exit;

  Obj := SlackGUI.FindObjectNear(X,Y, SlackGUI.Objects[0]);
  if Obj = nil then Exit;

  if (SlackGUI.FocusObject = nil) then
  begin
    if (@Obj^.__OnMouseMove <> nil) then
      Obj^.__OnMouseMove(Obj, Shift, X,Y);
  end else
    if (@SlackGUI.FocusObject^.__OnMouseMove <> nil) then
      SlackGUI.FocusObject^.__OnMouseMove(SlackGUI.FocusObject, Shift, X,Y);

  if (SlackGUI.HoverObject <> Obj) then
  begin
    if (SlackGUI.HoverObject <> nil) and (@SlackGUI.HoverObject^.__OnMouseLeave <> nil) then
      SlackGUI.HoverObject^.__OnMouseLeave(SlackGUI.HoverObject);

    SlackGUI.HoverObject := Obj;
    if (@SlackGUI.HoverObject^.__OnMouseEnter <> nil) then
      SlackGUI.HoverObject^.__OnMouseEnter(SlackGUI.HoverObject);
  end;
end;

procedure TSlackGUI.ProcessKeyDownEvent(_, Sender: TObject; var Key: Word; Shift: TShiftState); static;
begin
  if (SlackGUI.ObjectCount <= 0) then Exit;

  if (SlackGUI.FocusObject = nil) then
    SlackGUI.FocusObject := SlackGUI.Objects[0];

  if (@SlackGUI.FocusObject^.__OnKeyDown <> nil) then
    SlackGUI.FocusObject^.__OnKeyDown(SlackGUI.FocusObject, Key, Shift);
end;

procedure TSlackGUI.ProcessKeyUpEvent(_, Sender: TObject; var Key: Word; Shift: TShiftState); static;
begin
  if (SlackGUI.ObjectCount <= 0) then Exit;

  if (SlackGUI.FocusObject = nil) then
    SlackGUI.FocusObject := SlackGUI.Objects[0];

  if (@SlackGUI.FocusObject^.__OnKeyUp <> nil) then
    SlackGUI.FocusObject^.__OnKeyUp(SlackGUI.FocusObject, Key, Shift);
end;

procedure TSlackGUI.ProcessKeyPressEvent(_, Sender: TObject; var Key: Char); static;
begin
  if (SlackGUI.ObjectCount <= 0) then Exit;

  if (SlackGUI.FocusObject = nil) then
    SlackGUI.FocusObject := SlackGUI.Objects[0];

  if (@SlackGUI.FocusObject^.__OnKeyPress <> nil) then
    SlackGUI.FocusObject^.__OnKeyPress(SlackGUI.FocusObject, Key);
end;

// -----------------------------------------------------------------------------
// GUI
function TSlackGUI.Add(NewObj: TFormObject): TFormObject;
begin
  Objects[ObjectCount] := NewObj;
  Objects[ObjectCount]^.Index := ObjectCount;

  Result := NewObj;
  if (Result^.Parent <> nil) then
    Result^.Parent^.Children += Result;
  
  Inc(ObjectCount);
end;

function TSlackGUI.Canvas: TCanvas; constref;
begin
  Result := Self.Image.GetCanvas();
end;

function TSlackGUI.LoadImage(Path: String): TPicture;
var
  i,h: Int32;
begin
  if Path = '' then
    Exit(nil);

  for i:=0 to High(SlackGUI.Images) do
    if (Path = SlackGUI.Images[i].Path) then
      Exit(SlackGUI.Images[i].Image);
  
  Result.Init();
  Result.LoadFromFile(Path);

  h := Length(SlackGUI.Images);
  SetLength(SlackGUI.Images, h+1);
  
  SlackGUI.Images[h].Image := Result;
  SlackGUI.Images[h].Path  := Path;
end;

function TSlackGUI.AddImage(Image: TPicture; Name: String): TPicture;
var
  h: Int32;
begin
  Result := Image;
  h := Length(SlackGUI.Images);
  SetLength(SlackGUI.Images, h+1);
  SlackGUI.Images[h].Image := Result;
  SlackGUI.Images[h].Path  := Name;
end;

procedure TSlackGUI.Init(); static;
begin
  SetLength(SlackGUI.Objects, 1024);
  SlackGUI.Form.Init(nil);

  with SlackGUI.Form do
  begin
    SetCaption('SlackGUI');
    SetWidth(SlackGUI.Width);
    SetHeight(SlackGUI.Height);
    SetBorderStyle(bsNone);

    GetConstraints().SetMaxWidth(SlackGUI.Width);
    GetConstraints().SetMaxHeight(SlackGUI.Height);
    GetConstraints().SetMinWidth(SlackGUI.Width);
    GetConstraints().SetMinHeight(SlackGUI.Height);
    SetPosition(poScreenCenter);

    SetOnKeyPress(@TSlackGUI.ProcessKeyPressEvent);
    SetOnKeyDown (@TSlackGUI.ProcessKeyDownEvent);
    SetOnKeyUp   (@TSlackGUI.ProcessKeyUpEvent);
  end;

  SlackGUI.Image.Init(SlackGUI.Form);
  with SlackGUI.Image do
  begin
    SetParent(SlackGUI.Form);
    SetBounds(0,0, SlackGUI.Width, SlackGUI.Height);
    SetCenter(True);

    SetOnMouseDown(@TSlackGUI.ProcessMouseDownEvent);
    SetOnMouseUp  (@TSlackGUI.ProcessMouseUpEvent);
    SetOnMouseMove(@TSlackGUI.ProcessMouseMoveEvent);
  end;

  SlackGUI.Timer.Init(SlackGUI.Form);
  with SlackGUI.Timer do
  begin
    SlackGUI.Timer.SetOnTimer(@TSlackGUI.Render);
    SlackGUI.Timer.SetInterval(16);
  end;

  SlackGUI.Timer.SetEnabled(True);
end;


procedure TSlackGUI.Free; static;
var i:Int32;
begin
  if (SlackGUI.Form = nil) then
    Exit();

  SlackGUI.Timer.SetEnabled(False);
  SlackGUI.Form.Free();

  for i:=0 to SlackGUI.ObjectCount-1 do
  begin
    SetLength(SlackGUI.Objects[i]^.Children, 0);
    SetLength(SlackGUI.Objects[i]^.Name, 0);
    FreeMem(SlackGUI.Objects[i]);
  end;

  for i:=0 to High(SlackGUI.Images) do
  begin
    SlackGUI.Images[i].Image.Free();
  end;
end;

procedure TSlackGUI.Show();
begin
  SlackGUI := Self;
  try
    Sync(@TSlackGUI.Init);
  except
    WriteLn('ERROR: Failed to initialize form');
  finally
    Sync(@TSlackGUI.Free);
  end;
end;


