program Webber;
{$I SRL/OSR.simba}
{$I SlackGUI/SlackGUI.simba}
{$I RSWalker/Walker.simba}
{$H-}
//
// Click to add nodes. Click a node to focus in on it. Shift+click to connect, or disconnect a pair of nodes.
//
const
  MAP_PATH = 'includes/RSWalker/maps/World.png';


var
  // forms stuff
  WorldImg, Active: TMufasaBitmap;
  Tmp,Start,Curr,Center: TPoint;
  IsDragging, IsDraggingNode, IsTesting, MapNeedsUpdate: Boolean;
  CurrBitmap: TBitmap;
  Zoom: Double = 1;

  MapCoords, NodeName, ShowNames, SaveScreen, LoadScreen: TFormObject;
  TmpFileName: String;

  // node stuff
  NodeCount: Int32;
  InFocus := -1;

  Graph: TWebGraph;
  NodesNoZoom: TPointArray;

  // path generation testing
  TestPath: TIntArray;


function ToString(X: TPoint): String; override;
begin
  Result := '['+ToString(X.X)+', '+ToString(X.Y)+']';
end;

function ToString(X: TPointArray): String; override;
var i: Int32;
begin
  Result := '[';
  for i:=0 to High(X)-1 do Result += ToString(X[i])+',';
  Result += ToString(X[High(X)]);
  Result += ']';
end;

function ToString(X: TStringArray): String; override;
var i: Int32;
begin
  Result := '[';
  for i:=0 to High(X)-1 do Result += ''''+X[i]+''',';
  Result += ''''+X[High(X)]+'''';
  Result += ']';
end;

function GetValidIdent(ident: String): String;
var i: Int32;
begin
  for i:=1 to Length(ident) do
    if (ident[i].IsAlphaNum()) or (ident[i] = '_') then
      Result += ident[i];
end;

function LinesIntersect(p,q:array[0..1] of TPoint; out i:TPoint): Boolean;
var
  dx,dy,d: TPoint;
  dt,s,t: Double;
  function Det(a,b: TPoint): Int64;
  begin
    Result := a.x*b.y - a.y*b.x;
  end;
begin
  dx := [p[0].x - p[1].x, q[0].x - q[1].x];
  dy := [p[0].y - p[1].y, q[0].y - q[1].y];
  dt := det(dx, dy);
  if dt = 0 then Exit(False);
  d := [Det(p[0],p[1]), Det(q[0],q[1])];
  i.x := Round(Det(d, dx) / dt);
  i.y := Round(Det(d, dy) / dt);
  s := (dx.x * (q[0].y-p[0].y) + dy.x * (p[0].x-q[0].x)) / dt;
  t := (dx.y * (p[0].y-q[0].y) + dy.y * (q[0].x-p[0].x)) / (-dt);
  Result := (s > 0) and (s < 1) and (t > 0) and (t < 1);
end;

function ApplyZoom(pt: TPoint; Z: Double): TPoint;
begin
  Result.X := Round(pt.X * Z);
  Result.Y := Round(pt.Y * Z);
end;

function ApplyZoomInv(pt: TPoint; Z: Double): TPoint;
begin
  Result.X := Round(pt.X * 1/Z);
  Result.Y := Round(pt.Y * 1/Z);
end;

procedure SetZoom(Z: Double);
var
  i: Int32;
begin
  if (WorldImg.GetWidth * Z) * (WorldImg.GetHeight * Z) > 8000*8000 then
  begin
    WriteLn('Error: Image is too large to zoom in');
    Exit;
  end;

  if Active <> nil then
    Active.Free();

  Active := WorldImg.Copy(0,0,WorldImg.GetWidth-1, WorldImg.GetHeight-1);
  client.GetMBitmaps.AddBMP(Active);
  Active.SetList(client.GetMBitmaps);

  Graph.Nodes := Copy(NodesNoZoom);

  if (Z <> 1) then
  begin
    if (Z < 1) then
      Active.ResizeEx(RM_Bilinear, Trunc(Active.GetWidth * Z), Trunc(Active.GetHeight * Z))
    else
      Active.ResizeEx(RM_Nearest, Trunc(Active.GetWidth * Z), Trunc(Active.GetHeight * Z));

    for i:=0 to High(Graph.Nodes) do
      Graph.Nodes[i] := ApplyZoom(Graph.Nodes[i], Z);
  end;

  Curr := ApplyZoom(ApplyZoomInv(Curr, Zoom), Z);
  if Z > Zoom then
    Curr := Curr + Center
  else
  begin
    Curr.X := Curr.X - Center.X div 2;
    Curr.Y := Curr.Y - Center.Y div 2;
  end;

  Zoom := Z;
end;

function CheckForNearbyNode(p: TPoint): Int32;
var i:Int32;
begin
  Result := -1;
  for i:=0 to High(Graph.Nodes) do
    if Distance(p,Graph.Nodes[i]) < 5 then
      Exit(i);
end;


procedure AddNode(p: TPoint);
var
  c: Int32;
begin
  if (InFocus <> -1) and (Graph.InvalidConnection(p,Graph.Nodes[InFocus])) then
  begin
    WriteLn('Error: Path crosses another path');
    Exit;
  end;

  c := NodeCount;
  Inc(NodeCount);
  SetLength(Graph.Nodes, NodeCount);
  SetLength(Graph.Paths, NodeCount);
  SetLength(Graph.Names, NodeCount);
  SetLength(NodesNoZoom, NodeCount);

  Graph.Nodes[c] := p;
  NodesNoZoom[c] := ApplyZoomInv(p, Zoom);
  if InFocus = -1 then
    InFocus := c
  else
  begin
    Graph.Paths[InFocus] += c;
    Graph.Paths[c] += InFocus;
  end;
end;

procedure ConnectNodes(a,b: Int32);
begin
  if not Graph.ConnectNodes(a,b) then
    WriteLn('Error: Path crosses another path');
end;

procedure DeleteNode(node: Int32);
var
  i,j,n,curr: Int32;
  marked: TIntArray;
begin
  marked += node;
  repeat
    curr := marked.Pop();

    for n in Graph.Paths[curr] do
    begin
      Graph.Paths[n].Remove(curr, True);
      if Length(Graph.Paths[n]) = 0 then
        marked += n;
    end;

    // offset remainding nodes
    for i:=0 to High(Graph.Paths) do
      for j:=0 to High(Graph.Paths[i]) do
        if Graph.Paths[i][j] > curr then
          Dec(Graph.Paths[i][j]);

    for i:=0 to High(marked) do
      if marked[i] > curr then Dec(marked[i]);

    // remove the node itself
    Delete(Graph.Paths, curr, 1);
    Delete(Graph.Nodes, curr, 1);
    Delete(Graph.Names, curr, 1);
    Delete(NodesNoZoom, curr, 1);
    Dec(NodeCount);
  until Length(marked) = 0;
end;

procedure DrawWeb(Image: TMufasaBitmap; X1,Y1: Int32; Graph: TWebGraph);
var
  W,H,i,j,n,color,add: Int32;
  p,q: TPoint;
  nodes,line: TPointArray;
begin
  if Length(Graph.Nodes) = 0 then Exit;

  W := Image.GetWidth-1;
  H := Image.GetHeight-1;

  Nodes := Copy(Graph.Nodes);
  Nodes.Offset(Point(-X1,-Y1));

  for i:=0 to High(Graph.Paths) do
  begin
    p := Nodes[i];
    if (not InRange(p.x,4,W-4)) or (not InRange(p.y,4,H-4)) then
      continue;

    for j:=0 to High(Graph.Paths[i]) do
    begin
      q := Nodes[Graph.Paths[i][j]];
      line := TPAFromLine(p.x,p.y,q.x,q.y);
      FilterPointsBox(line,0,0,W,H);
      Image.DrawTPA(line, $00FFFF);
    end;
  end;

  for i:=0 to High(Nodes) do
  begin
    color := $0000FF;
    if Length(Graph.Names[i]) <> 0 then color := $77FF00;

    if InRange(Nodes[i].x,4,W-4) and InRange(Nodes[i].y,4,H-4) then
    begin
      if      Zoom <= 0.25 then Image.SetPixel(Nodes[i].x,Nodes[i].y, color)
      else if Zoom <= 0.5  then Image.DrawBox(Box(Nodes[i],1,1), True, color)
      else if Zoom >= 0.99 then
      begin
        Image.DrawBox(Box(Nodes[i],2,1), True, color);
        Image.DrawBox(Box(Nodes[i],1,2), True, color);
      end;
    end;
  end;

  if TCheckBoxObject(ShowNames)^.IsChecked then
  begin
    for i:=0 to High(Nodes) do
      if Graph.Names[i] <> '' then
      begin
        n := Length(Graph.Names[i]) * 7;
        if i mod 2 = 0 then
          Image.DrawClippedText(Graph.Names[i], Nodes[i] + Point(-n div 2,1), UpChars07, True, $FFFFFF)
        else
          Image.DrawClippedText(Graph.Names[i], Nodes[i] + Point(-n div 2,-16), UpChars07, True, $FFFFFF);
      end;
  end;

  if InRange(Nodes[InFocus].x,4,W-4) and InRange(Nodes[InFocus].y,4,H-4) then
  begin
    if      Zoom <= 0.25 then Image.DrawCircle(Nodes[InFocus],1,True,$FF0000)
    else if Zoom <= 0.5  then Image.DrawCircle(Nodes[InFocus],2,True,$FF0000)
    else if Zoom >= 0.99 then Image.DrawCircle(Nodes[InFocus],3,True,$FF0000)
  end;
end;

procedure DrawPath(Image: TMufasaBitmap; X1,Y1: Int32; Path: TIntArray; Graph: TWebGraph);
var
  i,W,H: Int32;
  p,q: TPoint;
  Nodes,line: TPointArray;
begin
  if Length(Graph.Nodes) = 0 then Exit;

  W := Image.GetWidth-1;
  H := Image.GetHeight-1;

  Nodes := Copy(Graph.Nodes);
  Nodes.Offset(Point(-X1,-Y1));

  p := Nodes[Path[0]];
  q := Nodes[Path[High(Path)]];

  if InRange(p.x,8,W-8) and InRange(p.y,8,H-8) then
    Image.DrawCircle(p, 8, True, $0000FF);

  if InRange(q.x,8,W-8) and InRange(q.y,8,H-8) then
    Image.DrawCircle(q, 8, True, $FF0000);

  for i:=0 to High(Path) do
  begin
    p := Nodes[Path[i]];
    if InRange(p.x,4,W-4) and InRange(p.y,4,H-4) then
      Image.DrawCircle(p,3,True, 0);

    if i < High(Path) then
    begin
      q := Nodes[Path[i+1]];
      line := TPAFromLine(p.x,p.y,q.x,q.y);
      FilterPointsBox(line,0,0,W,H);
      Image.DrawTPA(line, 0);
    end;
  end;
end;

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// The GUI
procedure SideButtonStyle(Obj: TFormObject);
begin
  TButtonObject(Obj).SetDefaultStyles();
  Obj^.Styles.Padding     := [5,5,5,6];
  Obj^.Styles.BorderSize  := 0;
  Obj^.Styles.BorderColor := SlackGUI.Palette[clBackground4];
  Obj^.Styles.Background  := SlackGUI.Palette[clBackground0];
  Obj^.Styles.FontSize    := 8;

  Obj^.Styles2.Background := SlackGUI.Palette[clHighlighted2];
  Obj^.Styles2.BorderColor:= SlackGUI.Palette[clHighlighted2];
  Obj^.Styles2.FontSize   := Obj^.Styles.FontSize;
  Obj^.Styles2.FontColor  := SlackGUI.Palette[clBackground0];
  Obj^.Styles2.Padding    := Obj^.Styles.Padding;
end;

procedure OnCloseWindow(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  SlackGUI.Form.Close();
end;

procedure OnDeleteNodeBtn(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  DeleteNode(InFocus);
  InFocus := High(Graph.Nodes);
  MapNeedsUpdate := True;
end;

procedure OnPrintBtn(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  Write('Index(',InFocus,'), ');
  Write('Node(', NodesNoZoom[InFocus],'), ');
  Write('Paths(', Graph.Paths[InFocus],')');
  WriteLn();
end;

procedure OnCopyBtn(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
var
  s: string;
begin
  s := 'Graph.Nodes := '+ ToStr(NodesNoZoom) + ';';
  s += #13#10;
  s += 'Graph.Paths := '+ ToStr(Graph.Paths) + ';';
  s += #13#10;
  s += 'Graph.Names := '+ ToStr(Graph.Names) + ';';
  SetClipBoard(s);
end;


procedure OnSaveShow(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  SaveScreen^.IsVisible := True;
end;

procedure OnSaveSave(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
var
  f: TFileStream;
  tmp, s, name: String;
  TSA: TStringArray;
  i,j: Int32;

  procedure SortTSA(var Arr: TStringArray);
  var i,j: Integer;
  begin
   for i:=1 to High(Arr) do
     for j:=i downto 1 do
     begin
       if not (Arr[j] < Arr[j - 1]) then
         Break;
       Swap(Arr[j - 1], Arr[j]);
     end;
  end;

begin
  if TmpFileName = '' then
  begin
    WriteLn('Error: Blank filename');
    Exit;
  end;

  f.Init(TmpFileName, $FFFF);

  TSA  := TmpFileName.Explode('/');
  TSA  := TSA[High(TSA)].Explode('\');
  name := TSA[High(TSA)];
  name := Capitalize(name.FileName) + Capitalize(name.FileExt());
  name := GetValidIdent(Replace(name, '-','_', [rfReplaceAll]));

  TSA := [];
  for i:=0 to High(Graph.Names) do
    if Graph.Names[i] <> '' then
    begin
      tmp := GetValidIdent(Graph.Names[i]);
      if Length(tmp) > 0 then
        TSA += Format('  loc%-30s := %s;', [tmp+': TPoint', ToStr(NodesNoZoom[i])]);
    end;
  SortTSA(TSA);

  s := '// World Web Generated With SlackGUI - Webber:' + LineEnding;
  s += '// https://github.com/slackydev/SlackGUI/blob/master/tests/Webber.simba' + LineEnding;
  s += 'var'                                            + LineEnding;
  s += '  '+name+': TWebGraph;'                         + LineEnding;
  s += ''                                               + LineEnding;
  s += 'var'                                            + LineEnding;
  s += TSA.Merge(LineEnding)                            + LineEnding;
  s += ''                                               + LineEnding;
  s += ''                                               + LineEnding;
  s += 'begin'                                          + LineEnding;
  s += '  '+name+'.Nodes := '+ ToStr(NodesNoZoom) + ';' + LineEnding;
  s += '  '+name+'.Paths := '+ ToStr(Graph.Paths) + ';' + LineEnding;
  s += '  '+name+'.Names := '+ ToStr(Graph.Names) + ';' + LineEnding;
  s += 'end;' + LineEnding;

  f.Write(s[1], Length(s));
  f.Free();

  SaveScreen^.IsVisible := False;
end;

procedure OnSaveCancel(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  SaveScreen^.IsVisible := False;
end;

procedure OnSaveWrite(Sender: TFormObject; var Key: Char); static;
begin
  with TInputFieldObject(Sender)^ do
  begin
    if (Key in ['<','>',':','"','|','?','*']) then
      Key := #0;

    if Ord(Key) <> VK_BACK then
      TmpFileName := Text + Key;
  end;
end;



procedure OnLoadShow(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  LoadScreen^.IsVisible := True;
end;

procedure OnLoadLoad(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;

  function StrToTPA(s: String): TPointArray;
  var
    i: Int32;
    Arr: TExtArray;
  begin
    Arr := s.ExtractNumbers();
    SetLength(Result, Length(Arr) div 2);
    for i:=0 to High(Result) do
    begin
      Result[i].x := Trunc(Arr[i*2]);
      Result[i].y := Trunc(Arr[i*2+1]);
    end;
  end;

  function StrToATIA(s:String): T2DIntArray;
  var
    i,j: Int32;
    Arr: TExtArray;
    TSA: TStringArray;
  begin
    TSA := s.Explode('[');
    TSA.Del(0,2);
    SetLength(Result, Length(TSA));
    for i:=0 to High(TSA) do
    begin
      Arr := TSA[i].ExtractNumbers();
      SetLength(Result[i], Length(Arr));
      for j:=0 to High(Arr) do
        Result[i][j] := Trunc(Arr[j]);
    end;
  end;

  function StrToTSA(s:String): TStringArray;
  var i: Int32;
  begin
    s := s.Replace('[','').Replace(']','').Replace('''','').Replace(';','');
    Result := s.Explode(',');
    for i:=0 to High(Result) do
      Result[i] := Result[i].Strip();
    if s[Length(s)] = ',' then Result += '';
  end;

var
  f: TStringList;
  TSA: TStringArray;
  s,name: String;
  i,j: Int32;
begin
  if TmpFileName = '' then
  begin
    WriteLn('Error: Blank filename');
    Exit;
  end;

  f.Init();
  f.LoadFromFile(TmpFileName);
  s := f.GetText();
  f.Free();

  TSA := Explode(LineEnding, s);
  for i:=0 to High(TSA) do
    if ('.Nodes := ' in TSA[i]) then
      Graph.Nodes := StrToTPA(TSA[i].After('.Nodes := '));
  for i:=0 to High(TSA) do
    if ('.Paths := ' in TSA[i]) then
      Graph.Paths := StrToATIA(TSA[i].After('.Paths := '));
  for i:=0 to High(TSA) do
    if ('.Names := ' in TSA[i]) then Graph.Names := StrToTSA(TSA[i].After('.Names := '));

  NodesNoZoom := Copy(Graph.Nodes);
  InFocus     := High(Graph.Nodes);
  NodeCount   := Length(Graph.Nodes);

  LoadScreen^.IsVisible := False;
  MapNeedsUpdate := True;
end;

procedure OnLoadCancel(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  LoadScreen^.IsVisible := False;
end;

procedure OnLoadWrite(Sender: TFormObject; var Key: Char); static;
begin
  with TInputFieldObject(Sender)^ do
  begin
    if (Key in ['<','>',':','"','|','?','*']) then
      Key := #0;

    if Ord(Key) <> VK_BACK then
      TmpFileName := Text + Key;
  end;
end;


procedure OnRunTest(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  IsTesting := not IsTesting;
  if IsTesting then
  begin
    TestPath := [];
    Sender^.Styles.BorderColor := SlackGUI.Palette[clBackground0];
    Sender^.Styles.Background  := SlackGUI.Palette[clHighlighted2];
    Sender^.Styles.FontColor   := SlackGUI.Palette[clBackground0];
    Sender^.Styles2.Background := SlackGUI.Palette[clHighlighted2];
    Sender^.Styles2.FontColor  := SlackGUI.Palette[clBackground0];
  end else
  begin
    SideButtonStyle(Sender);
    Swap(Sender^.Styles, Sender^.Styles2);
  end;
  MapNeedsUpdate := True;
end;

procedure OnRefocus(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  Curr := Point(-1,-1);
  MapNeedsUpdate := True;
end;

procedure OnZoomIn(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  SetZoom(Zoom * 2);
  MapNeedsUpdate := True;
end;

procedure OnZoomOut(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  SetZoom(Zoom / 2);
  MapNeedsUpdate := True;
end;

procedure OnPrintSep(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  WriteLn(#13#10);
end;

procedure OnUpdateNodeName(Sender: TFormObject; var Key: Char); static;
begin
  with TInputFieldObject(Sender)^ do
  begin
    if Ord(Key) <> VK_BACK then
      Graph.Names[InFocus] := Text + Key;
  end;
end;

procedure DrawMap(Self: TFormObject);
var
  newW, newH, X,Y,W,H,i,j: Int32;
  p,q: TPoint;
  tmp: TBitmap;
  muf: TMufasaBitmap;
  B: TRect;
  tmpTPA,line: TPointArray;
begin
  SlackGUI.RenderBasicBlock(Self);

  with self.Bounds do
  begin
    X := Left + 5;
    Y := Top  + 5;
    W := Right  - X - 5;
    H := Bottom - Y - 5;
    Center.X := W div 2;
    Center.Y := H div 2;
  end;

  if MapNeedsUpdate then
  begin
    if (Curr = [-1,-1]) and (InFocus <> -1) and (Length(Graph.Nodes) > 0) then
    begin
      Curr.X := Graph.Nodes[InFocus].X - W div 2;
      Curr.Y := Graph.Nodes[InFocus].Y - H div 2;
    end;
    Curr.X := Trunc(Min(Max(0,Active.GetWidth-W),  Max(Curr.X,0)));
    Curr.Y := Trunc(Min(Max(0,Active.GetHeight-H), Max(Curr.Y,0)));

    muf := Active.Copy(Curr.X,Curr.Y, Min(Active.GetWidth,Curr.X+W)-1, Min(Active.GetHeight, Curr.Y+H)-1);
    muf.SetList(client.GetMBitmaps);
    client.GetMBitmaps.AddBMP(muf);
    Wait(0);

    // draw web and path
    DrawWeb(muf, Curr.X, Curr.Y, Graph);
    if (IsTesting) and (Length(TestPath) > 0) then
      DrawPath(muf, Curr.X, Curr.Y, TestPath, Graph);

    // draw GUI and clean up
    tmp := muf.ToTBitmap;
    SlackGUI.Canvas.Draw(x,y,tmp);
    if CurrBitmap <> nil then CurrBitmap.Free();
    CurrBitmap := tmp;
    muf.Free();
    MapNeedsUpdate := False;
  end else
    SlackGUI.Canvas.Draw(x,y,CurrBitmap);
end;


procedure ImgPress(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
var
  dx,dy,idx: Int32;
begin
  if Button = mbLeft then
  begin
    tmp := Point(X,Y);
    start := Curr;
    if (InFocus <> -1) then
      with Sender.Bounds(True) do
      begin
        dx := Curr.X + X - Left - 5;
        dy := Curr.Y + Y - Top - 5;
        if Distance(Graph.Nodes[InFocus], Point(dx,dy)) < 5 then
          IsDraggingNode := True;
      end;

    if(not IsDraggingNode) then
      IsDragging := True;

    MapNeedsUpdate := True;
  end;
end;

procedure ImgMove(Sender: TFormObject; Shift: TShiftState; X,Y: Int32); static;
begin
  with Sender.Bounds(True) do
    TTextObject(MapCoords)^.Text := ToStr(Point(Curr.X + X - Left - 5, Curr.Y + Y - Top - 5));

  if IsDragging then
  begin
    Curr := [Max(0, Curr.X + tmp.X-X), Max(0, Curr.Y + tmp.Y-Y)];
    Tmp  := [X,Y];
    MapNeedsUpdate := True;
  end;

  if IsDraggingNode then
  begin
    with Sender.Bounds(True) do
      Graph.Nodes[InFocus] := Point(Curr.X + X - Left - 5, Curr.Y + Y - Top - 5);
    MapNeedsUpdate := True;
  end;
end;

procedure ImgRelease(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
var
  dx,dy,c,idx: Int32;
  DidChange: Boolean;
  t: Double;

  procedure SetInFocus(id: Int32);
  begin
    InFocus := id;
    TTextObject(NodeName)^.Text := Graph.Names[InFocus];
  end;

begin
  if (Button = mbLeft) and (IsDragging) then
  begin
    Curr := [Max(0, Curr.X + tmp.X-X), Max(0, Curr.Y + tmp.Y-Y)];
    IsDragging := False;
    DidChange := Distance(Start, Curr) > 2;
  end
  else if (Button = mbLeft) and (IsDraggingNode) then
  begin
    NodesNoZoom[InFocus] := ApplyZoomInv(Graph.Nodes[InFocus], Zoom);
    IsDraggingNode := False;
    MapNeedsUpdate := True;
    Exit;
  end;

  if (Button = mbLeft) and (not DidChange) then
    with Sender.Bounds(True) do
    begin
      dx := Curr.X + X - Left - 5;
      dy := Curr.Y + Y - Top - 5;

      idx := CheckForNearbyNode([dx,dy]);

      if IsTesting then
      begin
        if idx <> -1 then
        begin
          t := PerformanceTimer();
          TestPath := Graph.FindPath(InFocus, idx, 0.0);
          WriteLn(
            'Path generated in ', Round(PerformanceTimer - t),'ms. ' +
            'Got ', Length(TestPath), ' nodes. ' +
            'Total distance ', Round(RSWUtils.PathLength(Graph.NodesToPoints(TestPath)),2)
          );
        end;
        MapNeedsUpdate := True;
        Exit;
      end;

      if (idx = -1) then                   // add node
        AddNode(Point(dx,dy))
      else if (not(ssShift in Shift)) then // select node
        SetInFocus(idx)
      else if (InFocus <> idx) then        // connect node
        ConnectNodes(InFocus, idx);
    end;
  MapNeedsUpdate := True;
end;

procedure TSlackGUI.Init(); static; override;
var
  TitleBar, TopObject, Button, Map: TFormObject;
  W, H: Int32;
begin
  SlackGUI.Width  := 990;
  SlackGUI.Height := 620;
  SlackGUI.Palette := DARK_NEUTRAL;

  inherited;

  W := SlackGUI.Width;
  H := SlackGUI.Height;
  Curr := Point(-1,-1);
  MapNeedsUpdate := True;

  { body }
  with (TopObject := SlackGUI.Add(FormObject('Stub')))^ do
  begin
    Position := bpRelative;
    Styles.Background  := SlackGUI.Palette[clBackground2];
    Styles.BorderColor := SlackGUI.Palette[clBorder1];
    Styles.BorderSize  := 0;
    Styles.Padding     := [];
    RenderProc := @RenderBasicBlock;
  end;

  { header }
  with TTitlebarObject(TitleBar := SlackGUI.Add(TitlebarObject('TitleBar', [0,0,W,29], TopObject)))^ do
  begin
    Text       := 'Web Walk Generator';
    RenderProc := @RenderTitlebar;

    Styles.Background  := $1F1A13;
    Styles.BorderColor := SlackGUI.Palette[clBorder1];
    Styles.BorderSize  := 0;
    Styles.FontStyle := [fsBold];
    Styles.FontColor := SlackGUI.Palette[clText1];
    Styles.FontSize  := 12;
    Styles.FontName  := 'Tahoma';
  end;

  with TButtonObject(SlackGUI.Add(ButtonObject('GUIClose', TitleBar.Bounds, TitleBar)))^ do
  begin
    Bounds := Rect(Bounds.Right-26, Bounds.Top, Bounds.Right, Bounds.Bottom);
    Text   := 'X';
    Styles.FontName   := 'MS Sans Serif';
    Styles.Background := SlackGUI.Palette[clBackground0];
    Styles.BorderSize := 0;
    Styles.FontSize   := 13;
    Styles.FontStyle  := [fsBold];
    Styles.FontColor  := SlackGUI.Palette[clText3];
    Styles.Padding    := [7,5,0,0];

    Styles2 := Styles;
    Styles2.Background := clRed;
    Styles2.FontColor  := SlackGUI.Palette[clText1];

    RenderProc := @RenderTextButton;
    OnClick    := @OnCloseWindow;
  end;


  { buttons }
  begin
    with TButtonObject(Button := SlackGUI.Add(ButtonObject('REMOVE', [10,40,65], TopObject)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Text := 'REMOVE';
      OnClick := @OnDeleteNodeBtn;
    end;

    with TButtonObject(Button := SlackGUI.Add(ButtonObject('COPY', [10,65,65], TopObject)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Text := 'COPY';
      OnClick := @OnCopyBtn;
    end;

    with TButtonObject(Button := SlackGUI.Add(ButtonObject('LOAD', [10,90,65], TopObject)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Text := 'LOAD';
      OnClick := @OnLoadShow;
    end;

    with TButtonObject(Button := SlackGUI.Add(ButtonObject('SAVE', [10,115,65], TopObject)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Text := 'SAVE';
      OnClick := @OnSaveShow;
    end;

    with TButtonObject(Button := SlackGUI.Add(ButtonObject('TEST', [10,140,65], TopObject)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Text := 'TEST';
      OnClick := @OnRunTest;
    end;

    with TButtonObject(Button := SlackGUI.Add(ButtonObject('FOCUS', [10,165,65], TopObject)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Text := 'FOCUS';
      OnClick := @OnRefocus;
    end;

    with TButtonObject(Button := SlackGUI.Add(ButtonObject('ZOOM+', [10,210,35], TopObject)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Text := ' +';
      OnClick := @OnZoomIn;
    end;

    with TButtonObject(Button := SlackGUI.Add(ButtonObject('ZOOM-', [40,210,63], TopObject)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Text := ' -';
      OnClick := @OnZoomOut;
    end;

    with TButtonObject(Button := SlackGUI.Add(ButtonObject('PRINT', [10,260,65], TopObject)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Text := 'PRINT';
      OnClick := @OnPrintBtn;
    end;

    with TButtonObject(Button := SlackGUI.Add(ButtonObject('SEPARATOR', [10,285,65], TopObject)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Text := '---------';
      OnClick := @OnPrintSep;
    end;
  end;


  { world map }
  with (Map := SlackGUI.Add(FormObject('MAP', [65,40,-10,-30], TopObject)))^ do
  begin
    Position := bpRelative;
    Styles.Background  := SlackGUI.Palette[clBackground4];
    Styles.BorderColor := SlackGUI.Palette[clBorder1];
    Styles.BorderSize  := 0;
    Styles.Padding := [];
    RenderProc := @RenderBasicBlock;

    with SlackGUI.Add(FormObject('IMAGE', [], Map))^ do
    begin
      Position := bpRelative;
      RenderProc := @DrawMap;
      Styles.Background := 0;
      OnMouseDown := @ImgPress;
      OnMouseMove := @ImgMove;
      OnMouseUp   := @ImgRelease;
    end;
  end;

  { save screen }
  with (SaveScreen := SlackGUI.Add(FormObject('Save->Screen', [100,100,-100,150], TopObject)))^ do
  begin
    RenderProc := @RenderBasicBlock;
    Position   := bpRelative;
    IsVisible  := False;

    Styles.Background  := SlackGUI.Palette[clBackground2];
    Styles.BorderColor := SlackGUI.Palette[clBorder1];
    Styles.BorderSize  := 0;
    Styles.Padding     := [];

    with TInputFieldObject(SlackGUI.Add(InputFieldObject('Save->Text', [10,10,-120,-10], SaveScreen)))^ do
    begin
      RenderProc := @RenderInputField;
      Position   := bpRelative;
      Styles.BorderColor := SlackGUI.Palette[clBorder1];
      Styles.BorderSize  := 1;
      Styles.Background  := SlackGUI.Palette[clBackground4];
      Styles.Padding     := [7,1,0,0];
      Styles.FontSize    := 14;
      Styles.FontStyle   := [];
      Text := 'Includes/RSWalker/';
      OnKeyPress := @OnSaveWrite;
    end;

    with TButtonObject(Button := SlackGUI.Add(ButtonObject('Save->Save', [-115,10,-70,-10], SaveScreen)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Styles.FontSize  := 11;
      Styles2.FontSize := 11;
      Position := bpRelative;
      Text := 'Save';
      OnClick := @OnSaveSave;
    end;

    with TButtonObject(Button := SlackGUI.Add(ButtonObject('Save->Cancel', [-65,10,-10,-10], SaveScreen)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Styles.FontSize  := 11;
      Styles2.FontSize := 11;
      Position := bpRelative;
      Text := 'Cancel';
      OnClick := @OnSaveCancel;
    end;
  end;

  { Load screen }
  with (LoadScreen := SlackGUI.Add(FormObject('Load->Screen', [100,100,-100,150], TopObject)))^ do
  begin
    RenderProc := @RenderBasicBlock;
    Position   := bpRelative;
    IsVisible  := False;

    Styles.Background  := SlackGUI.Palette[clBackground2];
    Styles.BorderColor := SlackGUI.Palette[clBorder1];
    Styles.BorderSize  := 0;
    Styles.Padding     := [];

    with TInputFieldObject(SlackGUI.Add(InputFieldObject('Load->Text', [10,10,-120,-10], LoadScreen)))^ do
    begin
      RenderProc := @RenderInputField;
      Position   := bpRelative;
      Styles.BorderColor := SlackGUI.Palette[clBorder1];
      Styles.BorderSize  := 1;
      Styles.Background  := SlackGUI.Palette[clBackground4];
      Styles.Padding     := [7,1,0,0];
      Styles.FontSize    := 14;
      Styles.FontStyle   := [];
      Text := 'Includes/RSWalker/';
      OnKeyPress := @OnLoadWrite;
    end;

    with TButtonObject(Button := SlackGUI.Add(ButtonObject('Load->Load', [-115,10,-70,-10], LoadScreen)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Styles.FontSize  := 11;
      Styles2.FontSize := 11;
      Position := bpRelative;
      Text := 'Load';
      OnClick := @OnLoadLoad;
    end;

    with TButtonObject(Button := SlackGUI.Add(ButtonObject('Load->Cancel', [-65,10,-10,-10], LoadScreen)))^ do
    begin
      RenderProc := @RenderTextButton;
      SideButtonStyle(Button);
      Styles.FontSize  := 11;
      Styles2.FontSize := 11;
      Position := bpRelative;
      Text := 'Cancel';
      OnClick := @OnLoadCancel;
    end;
  end;

  { footer }
  with TTextObject(MapCoords := SlackGUI.Add(TextObject('COORDS', [W-90,H-25], TopObject)))^ do
  begin
    RenderProc := @RenderText;
    Styles.FontStyle := [];
    Text := '[0, 0]';
  end;

  with TInputFieldObject(NodeName := SlackGUI.Add(InputFieldObject('NODE', [65,H-26,300,H-5], TopObject)))^ do
  begin
    RenderProc := @RenderInputField;
    Styles.BorderColor := SlackGUI.Palette[clBorder1];
    Styles.BorderSize  := 1;
    Styles.Background  := SlackGUI.Palette[clBackground4];
    Styles.Padding     := [7,1,0,0];
    Styles.FontStyle   := [];
    Text := '';
    OnKeyPress := @OnUpdateNodeName;
  end;

  with TCheckBoxObject(ShowNames := SlackGUI.Add(CheckBoxObject('LOCATIONS', [315,H-23,328,H-10], TopObject)))^ do
  begin
    RenderProc := @RenderCheckbox;
    Styles.FontStyle  := [];
    Styles2.FontStyle := [];
    Text := 'Display locations';
  end;

  SlackGUI.Form.ShowModal;
end;


begin
  WorldImg.Init(client.GetMBitmaps);
  WorldImg.LoadFromFile(MAP_PATH);
  SetZoom(1);

  SlackGUI.Show();
  WorldImg.Free();
  Active.Free();
end.
