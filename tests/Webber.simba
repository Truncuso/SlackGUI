program Webber;
{$I SRL/OSR.simba}
{$I SlackGUI/SlackGUI.simba}
{$H-}
//
// Click to add nodes. Click a node to focus in on it. Shift+click to connect, or disconnect a pair of nodes.
//

const
  MAP_PATH = 'includes/RSWalker/maps/World.png';

type
  TWebGraph = record
    Nodes: TPointArray;
    Paths: T2DIntArray;
  end;

var
  // forms stuff
  WorldImg: TMufasaBitmap;
  CurrX, CurrY, tmpX, tmpY, StartX, StartY: Int32;
  IsDragging, IsDraggingNode, IsTesting: Boolean;

  // node stuff
  NodeCount: Int32;
  InFocus: Int32 = -1;
  Graph: TWebGraph;

  // path generation testing
  TestPath: TIntArray;


function ToString(X: TPoint): String; override;
begin
  Result := '['+ToString(X.X)+','+ToString(X.Y)+']';
end;

function ToString(X: TPointArray): String; override;
var i: Int32;
begin
  Result := '[';
  for i:=0 to High(X)-1 do Result += ToString(X[i])+',';
  Result += ToString(X[High(X)]);
  Result += ']';
end;

function LinesIntersect(p,q:array[0..1] of TPoint; out i:TPoint): Boolean;
var
  dx,dy,d: TPoint;
  dt,s,t: Double;
  function Det(a,b: TPoint): Int64;
  begin
    Result := a.x*b.y - a.y*b.x;
  end;
begin
  dx := [p[0].x - p[1].x, q[0].x - q[1].x];
  dy := [p[0].y - p[1].y, q[0].y - q[1].y];
  dt := det(dx, dy);
  if dt = 0 then Exit(False);
  d := [Det(p[0],p[1]), Det(q[0],q[1])];
  i.x := Round(Det(d, dx) / dt);
  i.y := Round(Det(d, dy) / dt);
  s := (dx.x * (q[0].y-p[0].y) + dy.x * (p[0].x-q[0].x)) / dt;
  t := (dx.y * (p[0].y-q[0].y) + dy.y * (q[0].x-p[0].x)) / (-dt);
  Result := (s > 0) and (s < 1) and (t > 0) and (t < 1);
end;

function CheckForNearbyNode(p: TPoint): Int32;
var i:Int32;
begin
  Result := -1;
  for i:=0 to High(Graph.Nodes) do
    if Distance(p,Graph.Nodes[i]) < 5 then
      Exit(i);
end;

function InvalidPath(p,q: TPoint): Boolean;
var
  i,n: Int32;
  l1,l2: array[0..1] of TPoint;
  _: TPoint;
begin
  l1 := [p,q];
  for i:=0 to High(Graph.Paths) do
  begin
    l2[0] := Graph.Nodes[i];
    for n in Graph.Paths[i] do
    begin
      l2[1] := Graph.Nodes[n];
      if (l1[0] = l2[0]) and (l1[1] = l2[1]) then
        Continue;
      if LinesIntersect(l1,l2,_) then
        Exit(True);
    end;
  end;
end;

procedure AddNode(p: TPoint);
var
  c: Int32;
begin
  if (InFocus <> -1) and (InvalidPath(p,Graph.Nodes[InFocus])) then
  begin
    WriteLn('Error: Path crosses another path');
    Exit;
  end;
  c := NodeCount;
  Inc(NodeCount);
  SetLength(Graph.Nodes, NodeCount);
  SetLength(Graph.Paths, NodeCount);

  Graph.Nodes[c] := p;
  if InFocus = -1 then
    InFocus := c
  else
  begin
    Graph.Paths[InFocus] += c;
    Graph.Paths[c] += InFocus;
  end;
end;

procedure ConnectNodes(a,b: Int32);
var
  i,n: Int32;
  p: TPoint;
  l1,l2: array[0..1] of TPoint;
begin
  if InIntArray(Graph.Paths[a], b) then
  begin
    Graph.Paths[a].Remove(b);
    Graph.Paths[b].Remove(a);
  end else
  begin
    if (InvalidPath(Graph.Nodes[a],Graph.Nodes[b])) then
    begin
      WriteLn('Error: Path crosses another path');
      Exit;
    end;

    Graph.Paths[a] += b;
    Graph.Paths[b] += a;
  end;
  (*
  l1 := [Graph.Nodes[a], Graph.Nodes[b]];
  SetLength(l2, 2);
  for i:=0 to High(Graph.Paths) do
  begin
    l2[0] := Graph.Nodes[i];
    for n in Graph.Paths[i] do
    begin
      l2[1] := Graph.Nodes[n];
      if LinesIntersect(l1,l2,p) then
      begin

      end;
    end;
  end;
  *)
end;

procedure DeleteNode(node: Int32);
var
  i,j,n,curr: Int32;
  marked: TIntArray;
begin
  marked += node;
  repeat
    curr := marked.Pop();

    for n in Graph.Paths[curr] do
    begin
      Graph.Paths[n].Remove(curr, True);
      if Length(Graph.Paths[n]) = 0 then
        marked += n;
    end;

    // offset remainding nodes
    for i:=0 to High(Graph.Paths) do
      for j:=0 to High(Graph.Paths[i]) do
        if Graph.Paths[i][j] > curr then
          Dec(Graph.Paths[i][j]);

    for i:=0 to High(marked) do
      if marked[i] > curr then Dec(marked[i]);

    // remove the node itself
    Delete(Graph.Paths, curr, 1);
    Delete(Graph.Nodes, curr, 1);
    Dec(NodeCount);
  until Length(marked) = 0;
end;

function FindPath(Graph: TWebGraph; Start, Goal: Int32): TIntArray;
type
  TNode = record
    Indices: TIntArray;
    Score: Double;
  end;
var
  queue: array of TNode;
  visited: TBoolArray;
  cIdx, pathIdx, n: Int32;
  current, node: TNode;
  altPaths: array of TIntArray;
  p,q: TPoint;

  function GetNextShortest(): TNode;
  var i,node: Int32;
  begin
    Result := queue[0];
    for i:=0 to High(queue) do
      if queue[i].Score < Result.Score then
      begin
        node   := i;
        Result := queue[i];
      end;
    Delete(queue, node, 1);
  end;
begin
  queue   := [[[start],0]];
  SetLength(visited, Length(Graph.Nodes));

  while Length(queue) <> 0 do
  begin
    current := GetNextShortest();
    cIdx := current.Indices[High(current.Indices)];
    if Visited[cIdx] then Continue; //skip overwrapping paths..
    Visited[cIdx] := True;

    if (cIdx = Goal) then
    begin
      Exit(current.Indices);
    end;

    p := Graph.Nodes[cIdx];
    for pathIdx in Graph.Paths[cIdx] do
    begin
      if not Visited[pathIdx] then
      begin
        q := Graph.Nodes[pathIdx];
        node.Indices := current.Indices + pathIdx;
        node.Score   := current.Score + Hypot(p.x-q.x, p.y-q.y);
        queue += node;
      end;
    end;
  end;
end;

procedure DrawWeb(Image: TMufasaBitmap; X1,Y1: Int32; Graph: TWebGraph);
var
  W,H,i,j: Int32;
  p,q: TPoint;
  Nodes,line: TPointArray;
begin
  W := Image.GetWidth-1;
  H := Image.GetHeight-1;

  Nodes := Copy(Graph.Nodes);
  Nodes.Offset(Point(-X1,-Y1));

  for i:=0 to High(Graph.Paths) do
  begin
    p := Nodes[i];
    if (not InRange(p.x,4,W-4)) or (not InRange(p.y,4,H-4)) then
      continue;

    for j:=0 to High(Graph.Paths[i]) do
    begin
      q := Nodes[Graph.Paths[i][j]];
      line := TPAFromLine(p.x,p.y,q.x,q.y);
      FilterPointsBox(line,0,0,W,H);
      Image.DrawTPA(line, $00FFFF);
    end;
  end;

  for i:=0 to High(Nodes) do
    if InRange(Nodes[i].x,4,W-5) and InRange(Nodes[i].y,4,H-5) then
    begin
      if InFocus = i then
        Image.DrawCircle(Nodes[i],4,True,$FF0000)
      else
        Image.DrawCircle(Nodes[i],2,True,$0000FF);
    end;
end;

procedure DrawPath(Image: TMufasaBitmap; X1,Y1: Int32; Path: TIntArray; Graph: TWebGraph);
var
  i,W,H: Int32;
  p,q: TPoint;
  Nodes,line: TPointArray;
begin
  W := Image.GetWidth-1;
  H := Image.GetHeight-1;

  Nodes := Copy(Graph.Nodes);
  Nodes.Offset(Point(-X1,-Y1));

  p := Nodes[Path[0]];
  q := Nodes[Path[High(Path)]];

  if InRange(p.x,8,W-8) and InRange(p.y,8,H-8) then
    Image.DrawCircle(p, 8, True, $0000FF);

  if InRange(q.x,8,W-8) and InRange(q.y,8,H-8) then
    Image.DrawCircle(q, 8, True, $FF0000);

  for i:=0 to High(Path) do
  begin
    p := Nodes[Path[i]];
    if InRange(p.x,4,W-4) and InRange(p.y,4,H-4) then
      Image.DrawCircle(p,3,True, 0);

    if i < High(Path) then
    begin
      q := Nodes[Path[i+1]];
      line := TPAFromLine(p.x,p.y,q.x,q.y);
      FilterPointsBox(line,0,0,W,H);
      Image.DrawTPA(line, 0);
    end;
  end;
end;

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// The GUI
procedure SideButtonStyle(Obj: TFormObject);
begin
  TButtonObject(Obj).SetDefaultStyles();
  Obj^.Styles.Padding     := [5,5,5,6];
  Obj^.Styles.BorderSize  := 0;
  Obj^.Styles.BorderColor := SlackGUI.Palette[clBackground4];
  Obj^.Styles.Background  := SlackGUI.Palette[clBackground0];
  Obj^.Styles.FontSize    := 8;

  Obj^.Styles2.Background := SlackGUI.Palette[clHighlighted2];
  Obj^.Styles2.BorderColor:= SlackGUI.Palette[clHighlighted2];
  Obj^.Styles2.FontSize   := Obj^.Styles.FontSize;
  Obj^.Styles2.FontColor  := SlackGUI.Palette[clBackground0];
  Obj^.Styles2.Padding    := Obj^.Styles.Padding;
end;

procedure OnCloseWindow(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  SlackGUI.Form.Close();
end;

procedure OnDeleteNodeBtn(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  DeleteNode(InFocus);
  InFocus := High(Graph.Nodes);
end;

procedure OnPrintBtn(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  Write('Index(',InFocus,'), ');
  Write('Node(', Graph.Nodes[InFocus],'), ');
  Write('Paths(', Graph.Paths[InFocus],')');
  WriteLn();
end;

procedure OnCopyBtn(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
var s: string;
begin
  s := 'Graph.Nodes := '+ ToString(Graph.Nodes) + ';';
  s += #13#10;
  s += 'Graph.Paths := '+ ToStr(Graph.Paths) + ';';
  SetClipBoard(s);
end;

procedure OnRunTest(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  IsTesting := not IsTesting;
  if IsTesting then
  begin
    TestPath := [];
    Sender^.Styles.BorderColor := SlackGUI.Palette[clBackground0];
    Sender^.Styles.Background  := SlackGUI.Palette[clHighlighted2];
    Sender^.Styles.FontColor   := SlackGUI.Palette[clBackground0];
    Sender^.Styles2.Background := SlackGUI.Palette[clHighlighted2];
    Sender^.Styles2.FontColor  := SlackGUI.Palette[clBackground0];
  end else
  begin
    SideButtonStyle(Sender);
    Swap(Sender^.Styles, Sender^.Styles2);
  end;
end;

procedure OnRunCheck(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
var count,node,i,j:Int32;
begin
  for i:=0 to High(Graph.Paths) do
    for j:=0 to High(Graph.Paths[i]) do
    begin
      node := Graph.Paths[i][j];
      if not InIntArray(Graph.Paths[node], i) then
      begin
        Graph.Paths[node] += i;
        Inc(count);
      end;
    end;
  if count <> 0 then
    WriteLn('Check completed: Fixed `', count,'` pathways!')
  else
    WriteLn('Check completed: All was good!');
end;

procedure OnPrintSep(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
begin
  WriteLn(#13#10);
end;

procedure DrawMap(Self: TFormObject);
var
  newW, newH, X,Y,W,H,i,j: Int32;
  p,q: TPoint;
  tmp: TBitmap;
  muf: TMufasaBitmap;
  B: TRect;
  tmpTPA,line: TPointArray;
begin
  SlackGUI.RenderBasicBlock(Self);

  with self.Bounds do
  begin
    X := Left + 5;
    Y := Top  + 5;
    W := Right  - X - 5;
    H := Bottom - Y - 5;
  end;

  muf := WorldImg.Copy(CurrX,CurrY, Min(WorldImg.GetWidth,CurrX+W)-1,Min(WorldImg.GetHeight, CurrY+H)-1);
  muf.SetList(client.GetMBitmaps);
  client.GetMBitmaps.AddBMP(muf);
  DrawWeb(muf, CurrX, CurrY, Graph);

  if (IsTesting) and (Length(TestPath) > 0) then
    DrawPath(muf, CurrX, CurrY, TestPath, Graph);

  tmp := muf.ToTBitmap;
  SlackGUI.Canvas.Draw(x,y,tmp);
  tmp.Free();
  muf.Free();
end;


procedure ImgPress(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
var
  dx,dy,idx: Int32;
begin
  if Button = mbLeft then
  begin
    tmpX := X;
    tmpY := Y;
    startX := CurrX;
    startY := CurrY;

    if (InFocus <> -1) then
      with Sender.Bounds(True) do
      begin
        dx := CurrX + X - Left;
        dy := CurrY + Y - Top;
        if Distance(Graph.Nodes[InFocus], Point(dx-5,dy-5)) < 5 then
          IsDraggingNode := True;
      end;

    if(not IsDraggingNode) then
      IsDragging := True;
  end;
end;

procedure ImgMove(Sender: TFormObject; Shift: TShiftState; X,Y: Int32); static;
begin
  if IsDragging then
  begin
    CurrX := Max(0, CurrX + tmpX-X);
    CurrY := Max(0, CurrY + tmpY-Y);
    tmpX := X;
    tmpY := Y;
  end;

  if IsDraggingNode then
    with Sender.Bounds(True) do
      Graph.Nodes[InFocus] := Point(CurrX + X - Left, CurrY + Y - Top);
end;

procedure ImgRelease(Sender: TFormObject; Button: TMouseButton; Shift: TShiftState; X,Y: Int32); static;
var
  dx,dy,c,idx: Int32;
  DidChange: Boolean;
  t: Double;
begin
  if (Button = mbLeft) and (IsDragging) then
  begin
    CurrX := Max(0, CurrX + tmpX-X);
    CurrY := Max(0, CurrY + tmpY-Y);
    IsDragging := False;
    DidChange := (StartX <> CurrX) or (StartY <> CurrY);
  end else
  if (Button = mbLeft) and (IsDraggingNode) then
  begin
    with Sender.Bounds(True) do
      Graph.Nodes[InFocus] := Point(CurrX + X - Left, CurrY + Y - Top);
    IsDraggingNode := False;
    Exit;
  end;

  if (Button = mbLeft) and (not DidChange) then
    with Sender.Bounds(True) do
    begin
      dx := CurrX + X - Left - 5;
      dy := CurrY + Y - Top - 5;

      idx := CheckForNearbyNode([dx,dy]);

      if IsTesting then
      begin
        if idx <> -1 then
        begin
          t := PerformanceTimer();
          TestPath := FindPath(Graph, InFocus, idx);
          WriteLn('Path generated in ', Round(PerformanceTimer - t),'ms | Found ', Length(TestPath), ' nodes');
        end;
        Exit;
      end;

      if (idx = -1) then                   // add node
        AddNode(Point(dx,dy))
      else if (not(ssShift in Shift)) then // select node
        InFocus := idx
      else if (InFocus <> idx) then        // connect node
        ConnectNodes(InFocus, idx);
    end;
end;

procedure TSlackGUI.Init(); static; override;
var
  TitleBar, TopObject, Button, MapPath: TFormObject;
  W, H: Int32;
begin
  SlackGUI.Width  := 990;
  SlackGUI.Height := 620;
  SlackGUI.Palette := DARK_NEUTRAL;

  inherited;

  W := SlackGUI.Width;
  H := SlackGUI.Height;

  with (TopObject := SlackGUI.AddObject(FormObject('Stub')))^ do
  begin
    Position   := bpRelative;
    Styles.Background  := SlackGUI.Palette[clBackground2];
    Styles.BorderColor := SlackGUI.Palette[clBorder1];
    Styles.BorderSize  := 0;
    Styles.Padding     := [];
    RenderProc := @RenderBasicBlock;
  end;

  with TTitlebarObject(TitleBar := SlackGUI.AddObject(TitlebarObject('TitleBar', [0,0,W,29], TopObject)))^ do
  begin
    Text       := 'Web Walk Generator';
    RenderProc := @RenderTitlebar;

    Styles.Background  := $1F1A13;
    Styles.BorderColor := SlackGUI.Palette[clBorder1];
    Styles.BorderSize  := 0;
    Styles.FontStyle := [fsBold];
    Styles.FontColor := SlackGUI.Palette[clText1];
    Styles.FontSize  := 12;
    Styles.FontName  := 'Tahoma';
  end;

  with TButtonObject(SlackGUI.AddObject(ButtonObject('GUIClose', TitleBar.Bounds, TitleBar)))^ do
  begin
    Bounds := Rect(Bounds.Right-26, Bounds.Top, Bounds.Right, Bounds.Bottom);
    Text   := 'X';
    Styles.FontName   := 'MS Sans Serif';
    Styles.Background := SlackGUI.Palette[clBackground0];
    Styles.BorderSize := 0;
    Styles.FontSize   := 13;
    Styles.FontStyle  := [fsBold];
    Styles.FontColor  := SlackGUI.Palette[clText3];
    Styles.Padding    := [7,5,0,0];

    Styles2 := Styles;
    Styles2.Background := clRed;
    Styles2.FontColor  := SlackGUI.Palette[clText1];

    RenderProc := @RenderTextButton;
    OnClick    := @OnCloseWindow;
  end;

  with TButtonObject(Button := SlackGUI.AddObject(ButtonObject('REMOVE', [10,40,65], TopObject)))^ do
  begin
    RenderProc := @RenderTextButton;
    SideButtonStyle(Button);
    Text := 'REMOVE';
    OnClick := @OnDeleteNodeBtn;
  end;

  with TButtonObject(Button := SlackGUI.AddObject(ButtonObject('COPY', [10,65,65], TopObject)))^ do
  begin
    RenderProc := @RenderTextButton;
    SideButtonStyle(Button);
    Text := 'COPY';
    OnClick := @OnCopyBtn;
  end;

  with TButtonObject(Button := SlackGUI.AddObject(ButtonObject('TEST', [10,90,65], TopObject)))^ do
  begin
    RenderProc := @RenderTextButton;
    SideButtonStyle(Button);
    Text := 'TEST';
    OnClick := @OnRunTest;
  end;

  with TButtonObject(Button := SlackGUI.AddObject(ButtonObject('CHECK', [10,115,65], TopObject)))^ do
  begin
    RenderProc := @RenderTextButton;
    SideButtonStyle(Button);
    Text := 'CHECK';
    OnClick := @OnRunCheck;
  end;

  with TButtonObject(Button := SlackGUI.AddObject(ButtonObject('PRINT', [10,200,65], TopObject)))^ do
  begin
    RenderProc := @RenderTextButton;
    SideButtonStyle(Button);
    Text := 'PRINT';
    OnClick := @OnPrintBtn;
  end;

  with TButtonObject(Button := SlackGUI.AddObject(ButtonObject('SEPARATOR', [10,225,65], TopObject)))^ do
  begin
    RenderProc := @RenderTextButton;
    SideButtonStyle(Button);
    Text := '---------';
    OnClick := @OnPrintSep;
  end;

  with (MapPath := SlackGUI.AddObject(FormObject('MapPath', [65,40,-10,-10], TopObject)))^ do
  begin
    Position := bpRelative;
    Styles.Background  := SlackGUI.Palette[clBackground2];
    Styles.BorderColor := SlackGUI.Palette[clBorder1];
    Styles.BorderSize  := 0;
    Styles.Padding := [];
    RenderProc := @RenderBasicBlock;

    with SlackGUI.AddObject(FormObject('Image', [0,0,0,0], MapPath))^ do
    begin
      Position := bpRelative;
      RenderProc := @DrawMap;
      Styles.Background := 0;
      OnMouseDown := @ImgPress;
      OnMouseMove := @ImgMove;
      OnMouseUp   := @ImgRelease;
    end;
  end;

  SlackGUI.Form.ShowModal;
end;


begin
  Graph.Nodes := [[4659,2734],[4696,2733],[4678,2760],[4631,2734],[4640,2707],[4660,2706],[4683,2709],[4720,2775],[4721,2808],[4780,2779],[4780,2736],[4795,2731],[4822,2735],[4791,2684],[4856,2695],[4854,2735],[4822,2769],[4783,2840],[4753,2849],[4746,2888],[4808,2891],[4819,2860],[4839,2846],[4840,2807],[4792,2796],[4853,2794],[4904,2734],[4719,2734],[4752,2729],[4657,2888],[4651,2828],[4603,2779],[4596,2732],[4596,2658],[4540,2617],[4539,2651],[4539,2726],[4544,2846],[4651,2792],[4648,2760],[4675,2785],[4642,2945],[4704,3026],[4722,3101],[4810,3102],[4883,3126],[4872,3152],[4830,3157],[4764,3228],[4773,3402],[4958,3067],[4937,3123],[5005,3114],[5051,3122],[4995,3017],[4910,2958],[4967,2948],[4975,2897],[4961,2812],[4924,2753],[4944,2734],[4992,2960],[4774,2949],[4737,2932],[4660,2933],[4844,3475],[4752,3548],[4704,3402],[4673,3357],[4675,3419],[4686,3466],[4654,3466],[4700,3497],[4472,3301],[4477,3250],[4409,3269],[4347,3267],[4235,3328],[4227,3397],[4132,3400],[4160,3369],[4218,3358],[4729,3575],[4697,3575],[4752,3601],[4752,3641],[4780,3649],[4781,3711],[4762,3782],[4739,3845],[4731,3675],[4560,3657],[4653,3835],[4584,3844],[4374,3719],[4635,3437],[4568,3466],[4508,3482],[4457,3494],[4417,3512],[4358,3530],[4288,3536],[4234,3514],[4225,3451],[4310,3556],[4168,3518],[4252,3554],[4264,3770],[4154,3483],[4177,3400],[4519,3375],[4487,3389],[4586,3436],[4635,3483],[4180,3286],[4124,3345],[4110,2912],[4088,3341],[4120,3305],[4249,3136],[4047,3436],[4023,3436],[4022,3460],[3971,3435],[3921,3424],[3885,3476],[3919,3480],[3922,3507],[3975,3505],[4012,3507],[3975,3463],[3921,3576],[3915,3627],[3932,3636],[3932,3675],[3978,3677],[4005,3636],[3881,3624],[3874,3578],[3895,3517],[3842,3522],[3888,3391],[3847,3335],[3836,3487],[3885,3437],[3796,3336],[3756,3386],[3717,3440],[3766,3521],[3686,3539],[3635,3556],[3635,3597],[3682,3422],[3735,3342],[3680,3309],[3544,3275],[3580,3223],[3546,3177],[3655,3223],[3759,3223],[3839,3574],[3590,3493],[3576,3527],[3537,3587],[3638,3371],[3600,3299],[3835,3136],[3774,3166],[3695,3181],[3644,3179],[3605,3132],[3594,3083],[3599,3040],[3615,3004],[3667,2981],[3610,2949],[3570,2998],[3570,2951],[3559,3027],[3668,3064],[3701,3082],[3668,2936],[3627,2926],[3695,2933],[3671,2912],[3752,2955],[3789,2980],[3833,3014],[3860,3003],[3839,3054],[3906,3042],[3900,3013],[3860,3026],[3941,3026],[3947,3047],[3981,3050],[3982,3016],[3983,2971],[3939,2978],[4040,2969],[4054,2953],[3931,3067],[3931,3104],[3895,3099],[3924,3127],[3789,2945],[3772,2931],[3772,2900],[3814,2948],[3679,2800],[3593,2648],[3559,2648],[3618,2575],[3630,2494],[3634,2425],[3763,2728],[3862,2730],[4088,2780],[4085,2840],[4212,2768],[4127,2755],[4129,2784],[4124,2714],[4018,2844],[3960,2825],[3885,2856],[3802,2859],[3674,2864],[3944,2881],[4015,2884],[4071,2886],[4256,2767],[4147,2843],[4152,2828],[4155,2791],[4180,2825],[4290,2778],[4330,2782],[4279,2722],[4405,2785],[4498,2733],[4498,2856],[4522,2917],[4553,2938],[4512,2981],[4578,2975],[4439,2899],[4371,2879],[4703,3194],[4657,3120],[4625,3075],[4625,3008],[4844,3004],[4753,3004],[4844,2958],[4468,2586],[4506,2528],[4521,2490],[4507,2452],[4425,2450],[4413,2490],[4427,2531],[4468,2504],[4483,2490],[4467,2476],[4452,2490],[4512,2715],[4512,2647],[4791,2589],[4765,2606],[4737,2659],[4746,2587],[4660,2596],[4724,2616],[4685,2651],[4660,2655],[4626,2652],[4596,2603],[4596,2525],[4601,2446],[4635,2438],[4687,2445],[4729,2466],[4630,2588],[4791,2441],[4782,2371],[4682,2372],[4553,2371],[4399,2372],[4354,2666],[4304,2382],[4250,2416],[4240,2455],[4214,2461],[4183,2464],[4177,2441],[4183,2484],[4166,2489],[4161,2438],[4183,2512],[4185,2568],[4208,2516],[4205,2589],[4130,2513],[4129,2581],[4015,2580],[3980,2568],[3945,2564],[3872,2627],[3872,2650],[3902,2513],[3911,2434],[3874,2395],[4161,2371],[4259,2373],[4102,2368],[4209,2714],[4178,2674],[4241,2715],[4155,2737],[4945,2674],[4961,2625],[4987,2604],[5047,2597],[5015,2516],[4919,2600],[4882,2536],[4858,2441],[4881,2387],[4930,2393],[4972,2437],[5040,2484],[4987,2735],[3720,2652],[3703,2571],[3584,2555],[3574,2455],[3578,2380],[4661,2558],[4636,2541],[4634,2495],[4671,2496],[4621,2481],[4347,3201],[4347,3130],[4358,3015],[4337,2936],[4289,2910],[4247,2871],[4246,3044],[4941,3162],[4959,3364],[4990,3355],[5010,3213],[4976,3586],[4928,3638],[4932,3707],[4928,3828],[5010,3643],[4956,3662],[5032,3727],[5057,3762],[5047,3707],[4902,3744],[4883,3733],[4883,3640],[4640,3796],[4601,3712],[4673,3525],[4620,3519],[4620,3631],[4676,3621],[4667,3575],[4663,3607],[4635,3608],[4665,3539],[4636,3538],[4583,3524],[4581,3486],[4431,3538],[3758,3590],[3799,3648],[3767,3731],[3796,3803],[3792,3870],[3834,3739],[3898,3739],[3834,3649],[3855,3651],[3877,3652],[3855,3706],[3883,3706],[3898,3682],[3848,3851],[3790,3463],[3781,3425],[3812,3388],[4098,3471],[4096,3392],[4383,3579],[4392,3608],[4352,3618],[4810,3382],[4830,3384],[4830,3342],[4801,3285],[4950,2989],[4569,3587],[4602,3523],[4429,3200],[4566,3230],[4517,3212],[5105,3501],[5113,3391],[5279,3387],[5053,3650],[5051,3582],[4063,3143],[3924,3144],[4019,3238],[3976,3228],[3993,3182],[3934,3190],[3854,3195],[4847,3543],[4800,3493],[4775,3477],[4814,3467],[5240,3348],[5318,3348],[5337,3372],[4885,3539],[4088,2724],[4093,2669],[4026,2766],[3948,2748],[4158,2620],[4158,2589],[4099,2613],[4110,2430],[4095,2584],[3816,3917],[3787,3978],[3719,3634],[3665,3648],[3612,3657],[3584,3645],[3579,3577],[4208,3270],[4316,3495],[4606,2848],[4614,2826],[4527,2752],[4444,3735],[3577,3418],[3586,3370],[3510,3397],[3472,3223],[4348,2495],[4352,2380],[4293,2490],[4314,2573],[4459,2994],[4501,3005],[3565,3120],[3589,3180],[4009,3115],[4034,3041],[3680,2499],[3635,2711],[4729,2532],[4840,3223],[3991,2935],[4248,3271],[4909,3184],[4900,3270],[4896,3347],[4891,3457],[4956,3247],[4958,3324],[4974,3498],[4853,3767],[4869,3820],[5015,3890],[5024,3958],[3987,3395],[3924,3372],[4961,3429],[4909,2690],[4901,2667],[4975,2817],[4928,3727],[4524,3343],[4473,3354],[4486,3606],[4554,3610],[4601,3643],[4207,3781],[4220,3846],[4276,3837],[3949,3340],[4019,3344],[4046,3369],[4027,3391],[4069,3393],[4154,3457],[4135,3431],[4123,3455],[4106,3421],[4411,3653],[4423,3682],[4607,3770],[4580,3811],[4615,3801],[4675,3870],[4583,3877],[4511,3866],[4470,3854],[4529,3566],[4528,3535],[4492,3512],[4455,3562],[4360,3465],[4346,3292],[4331,3278],[4339,3391],[4360,3388],[4404,3426],[4430,3384],[4017,2485],[3987,2485],[4044,2487],[4156,2546],[4259,2532],[4269,2492],[4257,2583],[4389,2412],[4586,2490],[4545,2490],[4545,2412],[4467,2412],[4545,2566],[4389,2566],[4389,2488],[4467,2438],[4468,2566],[4468,2544],[4878,2982],[4913,3017],[4924,3064],[4863,3095],[4309,3164],[4264,3199],[4067,3238],[3668,2768],[3604,2748],[3609,2857],[3674,2894],[4551,3724],[4512,3686],[4499,3748],[4531,3749],[4517,3660],[4452,3692],[4456,3650],[4677,3733],[4620,3665],[4676,3660],[4529,3834],[4484,3783],[4512,3784],[4444,3797],[4395,3860],[4393,3800],[4377,3764],[4421,3764],[4997,3425],[5009,3501],[5049,3511],[5000,3545],[5111,3339],[5050,3354],[5120,3275],[5120,3207],[5102,3170],[5054,3148],[5020,3137],[4961,3137],[5059,3194],[5058,3234],[5055,3267],[5051,3310],[5049,3444],[4905,3586],[4921,3539],[4945,3512],[4907,3782],[5028,3375],[5054,3404],[3683,2664],[4017,2406],[4068,2368],[3983,2368],[3759,2764],[3881,2796],[3800,2813],[3812,2774],[3739,2812],[4287,2835],[4351,2824],[4635,3336],[4566,3316],[4517,3169],[4449,3145],[4542,3145],[4510,3105],[4592,3134],[4611,3192],[4474,3196],[5076,3843],[5032,3828],[5096,3786],[5096,3699],[5069,3692],[3975,3087],[4287,3804],[3842,3438],[3836,3390],[3887,3418],[3623,3862],[3563,3863],[3564,3832],[3526,3843],[3468,3843],[3480,3809],[3442,3839],[3428,3862],[3407,3817],[3409,3767],[3431,3751],[3431,3683],[3459,3770],[3361,3835],[3307,3821],[3197,3814],[3125,3811],[3098,3723],[3155,3668],[3227,3676],[3186,3651],[3181,3850],[3159,3826],[3082,3793],[3077,3716],[3281,3782],[3243,3815],[3243,3773],[3224,3712],[3188,3688],[3623,3820],[3646,3863],[3226,3460],[3216,3412],[3213,3496],[3128,3512],[3092,3484],[3225,3351],[3192,3433],[3191,3365],[3204,3296],[3216,3233],[3176,3267],[3124,3283],[3126,3334],[3081,3289],[3164,3320],[3146,3415],[4460,3089],[4858,3412],[4858,3285],[4766,3322],[4763,3267],[4764,3157],[3747,2452],[3735,2393],[3705,2521],[3710,2502],[3718,2471],[3732,2506],[3754,2477],[4098,3080],[4096,3011],[4102,2955],[4072,2993],[4062,3040],[4061,3110],[4186,3215],[4167,3273],[4176,3187],[4172,3139],[4140,3138],[4102,3126],[4099,3171],[4099,3211],[4107,3285],[4137,3191],[3626,3262],[3657,3297],[3697,3248],[3825,3296],[3782,3321],[3763,3283],[3731,3286],[3739,3306],[3747,3273],[3796,3265],[3804,3185],[3835,3165],[3798,3235],[3832,3231],[3924,3238],[3467,3354],[3437,3289],[3523,3514],[3680,3677],[5108,3549],[4980,3727],[4982,3682],[4300,3502],[4273,3475],[4300,3443],[4339,3438],[4194,3451],[4184,3503],[4264,3614],[4217,3602],[4173,3570],[4214,3571],[4220,2805],[4420,2860],[4410,2627],[4443,2647],[4414,2668],[4387,2712],[4399,2751],[4380,2683],[4342,2713],[4337,2752],[4310,2622],[4312,2665],[4269,2658],[4273,2688],[4352,2627],[4352,2586],[4352,2566],[3837,3265],[3773,2699],[4469,2747],[4461,2762],[4444,2827],[4443,2792],[4828,3064],[4813,3420],[4020,3320],[3941,3303],[3832,3806],[3872,3794],[3909,3821],[3938,3784],[3934,3744],[3903,3775],[3997,2629],[4019,2664],[4027,2736],[4042,2638],[3960,2632],[3928,2690],[3984,2692],[3944,2709],[3972,2730],[3634,3477],[3649,3446],[3748,3466],[3749,3522],[3698,3523],[3698,3487],[3717,3490],[4150,2711],[4147,2690],[4144,2666],[4127,2655],[4106,2661],[4100,2685],[4197,2634],[4095,2744],[5077,2578],[4058,2712],[4649,3781],[4626,3747],[4706,3459],[4740,3456],[4731,3402],[4579,3736],[4585,3676],[4446,3671],[3584,3276],[4568,3402],[4547,3392],[4529,3415],[4489,3417],[4444,3433],[4544,3438],[4532,3460],[3485,3486],[3544,3255]];
  Graph.Paths := [[1, 3, 5, 4, 6, 2, 39], [0, 2, 6, 27], [1, 0, 39, 40, 7, 27], [0, 4, 32, 39], [3, 5, 0, 33], [4, 6, 0, 275], [5, 1, 0, 270, 27], [8, 9, 27, 2], [7, 18], [7, 10, 17, 24], [9, 11, 28], [10, 12, 13], [11, 15, 16], [11, 14, 28, 268, 270], [13, 15, 26], [14, 12, 25, 26], [12], [9, 18, 21, 24], [17, 19, 8], [18, 20, 29], [19, 21], [20, 17, 22], [21, 23, 25], [22, 24, 25], [23, 9, 17], [23, 15, 26, 22], [15, 25, 59, 60, 320, 14, 488], [7, 1, 28, 6, 2], [27, 10, 13, 270], [19, 30, 41, 64], [29, 31, 38, 451], [30, 32, 39, 451], [31, 3, 33, 36], [32, 4, 34, 35], [33, 255, 35], [33, 36, 255, 34, 267], [35, 32, 37, 240, 266, 452], [36, 450, 452], [30, 39, 40], [38, 31, 2, 3, 0], [38, 2], [29, 42, 64, 243, 245, 251], [41, 43, 64, 251, 253], [42, 44], [43, 45, 550, 761], [44, 46, 50, 51, 549, 550], [45, 47, 471], [46, 48, 682], [47, 248, 681, 682], [426, 680, 762, 402, 801], [45, 51, 52, 54, 548, 549], [45, 50, 52, 350, 474, 587], [51, 53, 50, 54], [52, 54], [52, 50, 61, 53], [56, 254, 547, 548], [55, 57, 61, 406], [56, 58, 61, 490], [57, 59, 60, 332, 490], [58, 26, 60], [58, 59, 26, 320, 332], [54, 56, 57], [63, 254, 253], [62, 64], [63, 41, 29, 42], [424, 427, 762], [72, 82, 84, 424], [68, 69, 801], [67, 69, 610], [67, 70, 68, 95], [69, 71, 72, 799], [70], [70, 66, 113, 799], [74, 75, 493, 528, 492, 611], [73, 409, 411], [73, 76, 523], [75, 343, 473, 523, 524, 552], [78, 81, 114, 473], [77, 81, 103, 109, 525], [80, 115, 117, 398, 506], [79, 81, 115], [80, 77, 78], [66, 83, 84], [82, 368, 371, 372], [82, 66, 85], [84, 86], [85, 87], [86, 88, 90], [87, 89, 90, 92, 366, 565], [88, 92, 514], [87, 88, 565, 567], [559, 562, 566, 803], [89, 93, 88, 366, 513, 514], [92, 512, 513, 514, 515, 568, 516], [400, 401, 453, 509, 510, 574], [69, 96, 112, 113], [95, 97, 112, 113, 378, 812], [96, 98, 377, 378, 520, 809, 812], [97, 99, 379, 520, 527, 810], [98, 100, 379, 522, 527], [99, 101, 104, 379, 399, 401, 449, 522], [100, 102, 104, 106, 728], [101, 103, 105, 106, 732, 733], [78, 102, 732], [101, 100, 106, 401, 734], [102, 106, 108, 733, 736, 737], [104, 101, 102, 105, 734, 735, 737], [497, 625, 734], [105, 397, 505, 733], [78], [111, 492, 807, 808], [110, 528, 809], [95, 96, 806], [95, 72, 96, 377, 378, 408], [77, 118, 115, 448, 697], [79, 80, 117, 118, 114], [218, 230, 232, 348, 692], [79, 115, 118, 398, 501, 504, 502, 704, 763], [115, 117, 114, 697, 704], [349, 344, 551, 552, 699], [121, 503, 504], [120, 122, 123], [121, 130], [121, 124, 126, 130, 485, 486], [123, 144, 628], [126, 139, 143, 144], [125, 123, 127, 139], [126, 128, 131], [127, 129, 130], [128], [128, 122, 123], [127, 132, 138], [131, 133, 137], [132, 134, 136], [133, 135], [134], [133], [132, 138, 389], [137, 131, 139, 160], [138, 140, 126, 125], [139, 143, 148, 160], [142, 486, 627, 628], [141, 145, 396, 500, 486, 627, 709, 755], [125, 140, 148, 394, 626], [125, 124, 626, 628], [142, 146, 153, 396, 709, 710], [145, 147, 152, 395, 396, 153], [146, 152, 395, 782, 785], [143, 140, 380, 160, 394, 783], [150, 380, 151, 443, 780, 784], [149, 151, 162, 447, 780], [150, 444, 149], [146, 153, 154, 147, 164, 781], [152, 145, 154, 146, 710, 713], [153, 152, 164, 707, 712], [457, 706, 805, 814], [157, 158, 457, 706, 814], [156, 457], [156, 159, 706, 707, 708], [158, 714, 716, 718, 711], [140, 138, 387, 380, 148], [162, 454, 780], [161, 163, 150, 723], [162, 447, 723], [152, 165, 154, 455, 707, 781], [164, 455, 706, 707, 805], [167, 189, 204, 717], [166, 168], [167, 169], [168, 170, 465], [169, 171, 464, 465], [170, 172, 176, 178, 464], [171, 173, 176], [172, 174, 175], [173, 179, 181], [173, 177, 182], [172, 177, 178, 171], [176, 175], [176, 464, 171], [174, 180], [179], [174, 182, 183, 184], [181, 175, 184], [181, 184, 185], [183, 182, 181, 557], [183, 186], [185, 187, 188, 205], [186, 188, 189], [187, 191, 192, 198, 186], [187, 190, 166], [189, 191, 201], [190, 188, 193, 198], [188], [191, 194, 196, 198], [193, 195, 201], [194, 196, 467, 624], [195, 193, 197], [196, 198, 199, 472], [197, 191, 188, 193], [197, 200, 467], [199], [190, 194, 202], [201, 203, 204], [202], [202, 166, 466, 624], [186, 206, 208], [205, 207], [206, 557], [205], [227, 556, 555, 554, 603, 607], [211, 212, 335, 469, 555], [210], [210, 213, 335], [214, 212], [213], [216, 333, 599, 603, 756], [215, 435, 756, 776, 779, 778], [218, 220, 221, 432, 434, 794], [217, 116, 223, 229, 230, 232], [220, 221, 231, 234, 235, 316, 319, 738], [219, 217, 222, 221, 319, 794], [217, 219, 234, 220], [220, 432, 787], [218, 224, 229], [223, 225, 604], [224, 226, 228, 604], [225, 227, 604, 605, 607], [226, 209, 556, 557, 607], [225, 229], [228, 223, 218, 230], [229, 218, 116, 692], [219, 236, 238, 608], [116, 218, 233, 235, 348], [232, 234], [233, 221, 219], [232, 219, 348, 738], [231, 237, 609], [236, 239, 747, 609], [231, 289, 746, 747, 751], [237, 609, 744, 758, 760], [36, 241, 266, 452, 757], [240, 242, 246, 739, 758], [241, 243, 246, 462], [242, 244, 245, 41], [243, 463, 245], [243, 41, 251, 244, 463], [242, 247, 241, 462, 739], [246, 608, 609, 739], [48, 249], [248, 250], [249, 251], [250, 41, 245, 42], [253, 254, 547, 548], [252, 254, 42, 62], [253, 252, 55, 62, 547], [34, 35, 267, 545, 740, 741, 753], [257, 262, 538, 541, 263, 546, 545], [256, 258, 263, 538], [257, 263, 538, 544, 264, 539, 540], [260, 264, 536, 265, 544, 540, 543], [259, 261, 265, 543], [260, 265, 542, 262, 543, 546, 545], [256, 263, 265, 261, 546], [257, 262, 258, 264, 256], [259, 263, 265, 258, 544], [260, 261, 264, 262, 259], [36, 240, 267], [266, 35, 255, 741], [13, 269, 271, 284], [268, 270, 271], [269, 13, 28, 6], [268, 269, 272, 273], [271, 275, 283, 338], [271, 274], [273, 275], [274, 5, 272, 276], [275, 277], [276, 278], [277, 537], [280, 537], [279, 281], [280, 282], [281, 470], [272], [268, 285, 286, 327], [284, 328, 286, 327], [284, 287, 285], [286, 288], [287, 459], [238, 745, 746, 748, 749, 752], [291, 314, 459], [290, 292, 293, 295, 313], [291, 293, 301], [291, 294, 292], [293, 295, 296], [294, 298, 291], [294, 297], [296, 298, 299, 303], [297, 295, 313, 439], [297, 300, 301], [299, 532], [299, 302, 292], [301, 437], [297, 304], [303, 437], [306, 433, 529, 771, 774], [305, 307, 775], [306, 308, 310], [307, 309], [308], [307, 311], [310, 312], [311], [298, 314, 315, 291], [313, 290], [313, 439, 601], [219, 317, 318, 788], [316, 436, 788, 793], [316], [219, 220, 787], [60, 26, 321, 325, 332, 488, 489], [320, 322, 325, 332], [321, 323, 324, 325, 332], [322, 795], [322, 330, 331, 326], [320, 321, 322, 326], [325, 327, 324], [326, 284, 328, 329, 285], [327, 285, 329], [328, 327, 330], [324, 329], [324], [60, 58, 321, 320, 490, 322], [215, 334, 599, 756], [333, 468, 599, 685], [210, 336, 212], [335, 337], [336], [272, 339], [338, 340], [339, 341, 342], [340], [340], [76, 344, 409, 551, 552], [343, 345, 119, 409, 551], [344, 346], [345, 347], [346, 348], [347, 235, 116, 232, 738], [119], [51, 478, 474, 587], [352, 479, 477, 476, 487], [353, 351, 487, 576, 581, 597], [352], [355, 358, 579, 594], [354, 356, 359, 365, 593, 594], [355, 359, 491], [482, 483, 596, 491, 620], [354, 359, 362, 415, 416, 579, 727], [358, 355, 356, 727], [361, 362, 620, 726, 727], [360, 362, 620, 621], [361, 360, 358, 415, 623], [364, 596], [363, 365, 481], [364, 355, 431, 593], [92, 88, 513, 797], [511, 558, 566, 567, 798, 802, 803], [83, 369], [368, 370], [369, 371], [370, 83], [83, 373, 375], [372, 374], [373], [372, 376], [375], [113, 97, 378, 407, 408, 519, 520, 518], [113, 97, 377, 96], [99, 98, 100, 399, 520, 521], [149, 148, 381, 160, 443, 387], [380, 382, 387, 385, 443], [381, 383, 443], [382, 384, 385, 765], [383, 441], [383, 386, 387, 381, 766], [385, 392, 766, 770], [385, 381, 388, 160, 380], [387, 389, 390], [388, 137, 392], [388, 391], [390], [389, 386, 769], [765, 766], [143, 395, 148], [394, 147, 146, 396], [395, 146, 145, 142, 627], [108, 398, 507, 508], [397, 117, 79, 508], [379, 100, 401, 400, 494, 521], [94, 401, 399, 509, 564], [94, 400, 100, 104, 399, 734], [403, 680, 762, 49], [402, 404, 678], [403, 405], [404, 679], [56], [377, 408, 496, 495, 494, 518], [407, 377, 113, 496], [74, 343, 344, 618], [411, 611], [410, 74, 612, 618], [413, 578, 725], [412, 414], [413, 428, 429, 430], [362, 358, 416, 623], [415, 358, 578, 579], [418, 419, 421, 553, 695, 701], [417, 422, 421, 717], [417, 420, 421, 553], [419, 720], [419, 417, 422, 418], [421, 418, 423], [422, 717, 719], [65, 66, 425], [424, 426, 427], [425, 49], [425, 65, 762], [414, 429], [414, 428, 430], [429, 414], [365, 477, 487, 594, 593], [217, 433, 434, 222, 792, 794, 796], [432, 305, 438, 774, 792, 796], [217, 432, 435, 773, 796], [434, 216, 773, 779], [317, 437, 438, 790, 793], [436, 302, 304], [436, 440, 433, 790], [298, 315, 440], [439, 438], [384, 442], [441], [380, 444, 382, 381, 149, 724], [443, 151, 445, 724], [444, 446], [445, 447], [446, 163, 150], [114, 473, 696], [100, 728], [37, 451], [450, 30, 31], [37, 36, 240], [94, 510, 560, 563, 569, 571, 575], [161, 455, 456], [454, 164, 165, 456], [455, 721, 454], [157, 156, 155], [459, 460, 461, 754], [458, 288, 290], [458, 534], [458, 533, 535, 754], [246, 463, 242], [462, 244, 245], [178, 170, 465, 171], [464, 169, 170], [204, 467, 624], [466, 195, 199], [334, 685, 686, 687], [210, 554, 555, 603], [282], [46], [197], [448, 77, 76, 524, 552], [51, 475, 350], [474, 476, 479, 478], [475, 477, 479, 351], [476, 431, 351, 487], [350, 479, 475], [478, 351, 475, 476], [487, 576, 577, 579, 595], [364, 482], [481, 357], [357, 484, 619, 620], [483], [123, 500, 501, 503, 486], [123, 141, 500, 142, 485], [352, 351, 477, 431, 480, 576, 595], [26, 320, 489], [488, 320], [57, 58, 332], [356, 596, 357, 726], [110, 493, 73, 611, 807], [492, 73, 528], [495, 407, 399, 518, 521], [494, 496, 407], [495, 407, 408], [107, 498], [497, 499], [498, 625], [501, 142, 486, 485, 764], [500, 117, 485, 502, 503, 763], [501, 503, 504, 117], [502, 485, 120, 504, 501], [503, 117, 502, 120], [108, 506, 507, 732], [505, 79, 507, 508, 508], [505, 397, 506], [506, 506, 398, 397], [400, 94, 510, 564], [509, 94, 453, 564, 563, 804], [367, 512, 513, 798, 802], [511, 93, 513, 568], [512, 511, 366, 92, 93], [92, 89, 93, 515], [93, 514, 516], [515, 517, 93, 568], [516, 568, 569, 571, 572], [494, 407, 519, 521, 377], [518, 377, 520, 521], [519, 377, 97, 98, 379, 521], [520, 519, 518, 494, 379, 399], [99, 100, 526, 525, 527, 731], [75, 76, 524, 525, 526], [523, 473, 76], [523, 526, 78, 522, 731], [523, 525, 522, 527, 528], [526, 528, 98, 522, 99, 810], [527, 526, 73, 493, 111, 810], [530, 531, 305, 600], [529], [529], [300], [461, 534, 535], [533, 460], [461, 533], [259, 540, 543], [278, 279, 538], [537, 256, 258, 257, 539, 541], [538, 540, 258], [539, 536, 544, 258, 259], [538, 256, 545], [543, 261, 545], [542, 536, 260, 259, 261], [259, 258, 264, 540], [255, 542, 541, 546, 261, 256], [545, 261, 256, 262], [55, 252, 254, 548], [547, 252, 55, 50, 549], [548, 50, 45], [44, 45, 761], [343, 552, 119, 344], [551, 119, 473, 343, 76, 698, 699], [419, 417], [469, 555, 209, 603], [554, 469, 210, 556, 209], [555, 209, 227], [227, 184, 207], [559, 561, 367, 802], [558, 560, 91, 562, 563], [453, 561, 559, 570, 569], [560, 558], [559, 91, 564], [559, 510, 453, 804], [562, 510, 400, 509, 804], [88, 90, 797], [91, 567, 367, 803], [566, 367, 90], [93, 569, 570, 516, 512, 517], [568, 570, 453, 560, 517, 571], [568, 560, 569], [517, 569, 453, 572, 574, 573, 575], [571, 517, 573], [572, 574, 571], [571, 573, 575, 94], [574, 453, 571], [352, 487, 480, 577, 578, 592, 597, 598], [576, 480, 578, 579], [577, 412, 576, 416, 592, 725], [480, 577, 354, 416, 358], [581, 582, 591, 598], [580, 352, 591, 597, 598], [580, 583, 590, 589, 591], [582, 584, 588, 589], [583, 585, 588], [584, 586, 588], [585, 587], [586, 51, 350], [585, 584, 583, 589], [588, 583, 590, 582], [589, 582, 591], [590, 580, 582, 581], [578, 576, 598], [355, 365, 594, 431], [593, 431, 595, 354, 355], [594, 487, 480], [363, 357, 491], [581, 576, 598, 352], [597, 581, 580, 592, 576], [215, 333, 334], [529, 601, 602], [600, 315, 602], [601, 600], [209, 215, 606, 607, 469, 554], [224, 225, 226, 605, 606], [604, 226, 606, 607], [605, 604, 603], [605, 227, 226, 209, 603], [247, 231, 609], [608, 247, 239, 236, 237], [68, 611], [610, 492, 73, 410], [411, 613, 617, 614], [612, 614, 615, 677], [613, 615, 612, 616, 617], [614, 613, 616, 677], [615, 617, 614], [616, 612, 614], [411, 409], [483, 620, 621], [483, 619, 360, 361, 357], [619, 361, 622], [621, 623], [622, 362, 415], [204, 466, 195], [107, 499], [143, 144, 627], [626, 396, 142, 141], [124, 144, 141], [659, 660, 630], [631, 632, 629], [630], [630, 633], [632, 634, 635, 636, 637], [633], [633, 636, 637], [635, 633, 637], [635, 638, 633, 636, 642], [637, 639], [638, 640, 641], [639], [639], [637, 643], [642, 654], [645, 650, 651, 655, 656], [644, 646, 651, 652, 647], [645, 647, 653, 652], [646, 648, 649, 658, 645], [647, 649, 657, 658], [648, 647], [644, 651, 655], [650, 645, 644], [645, 653, 646], [652, 646], [643, 655, 656], [654, 644, 656, 650], [644, 654, 655], [648, 658], [657, 648, 647], [629], [629], [662, 663, 667], [661, 666], [661, 664], [663, 665], [664], [662], [661, 668], [667, 669], [668, 670, 671], [669, 671], [669, 670, 672], [671, 673, 674], [672, 674, 676, 675], [672, 673], [676, 673], [675, 673], [615, 613], [403, 679], [678, 405], [402, 49, 681], [680, 48], [48, 47], [684, 689, 687], [683], [334, 686, 468, 688], [685, 687, 468, 687, 687, 688], [686, 686, 686, 468, 683], [686, 689, 685], [688, 683], [691, 695, 694, 701, 700], [690, 692, 694, 693], [691, 116, 230, 693], [694, 692, 691], [693, 695, 690, 691], [694, 417, 690, 701], [448, 697, 698, 705], [696, 114, 118, 704], [696, 552, 699, 700, 705], [698, 119, 552, 700], [698, 699, 701, 705, 690], [700, 690, 695, 417, 702], [701, 703, 705], [702, 704, 705], [703, 118, 697, 117], [702, 698, 700, 696, 703], [156, 158, 165, 155, 707], [706, 158, 164, 154, 708, 165], [707, 158, 712, 714], [145, 142, 710, 719, 715], [145, 153, 711, 709, 715], [710, 713, 714, 159, 718, 715], [713, 708, 154, 714], [712, 711, 153], [711, 159, 708, 712], [710, 718, 709, 719, 711], [717, 159, 718], [716, 166, 423, 418, 719], [716, 715, 719, 159, 711], [717, 709, 718, 715, 423, 755], [420], [456, 722], [721], [162, 163, 813], [444, 443], [412, 578], [491, 727, 360], [726, 359, 358, 360], [101, 449, 729], [728, 730], [729, 731], [730, 522, 525], [505, 102, 103], [105, 102, 108], [104, 401, 106, 107, 735], [734, 106, 736, 737], [735, 105, 737], [736, 106, 105, 735], [348, 235, 219], [246, 247, 241, 759], [255, 742, 752], [255, 267, 742], [741, 740, 743, 745], [742, 744, 745], [743, 239, 746, 747, 757, 758], [742, 743, 289, 746], [745, 744, 289, 238, 747], [746, 744, 238, 237], [289, 749, 752, 753], [748, 289, 750, 751], [749, 751], [749, 238, 750], [740, 753, 748, 289], [752, 754, 748, 255], [753, 461, 458], [142, 719], [216, 333, 215], [744, 240, 758], [757, 239, 241, 744], [739, 760], [759, 239], [550, 44], [402, 49, 427, 65], [117, 501], [500], [393, 383, 766], [393, 765, 385, 386, 767, 770], [766, 768], [767, 769, 770], [768, 392], [768, 386, 766], [772, 305, 774, 775], [771, 773], [772, 434, 435, 779, 796], [771, 305, 433], [771, 306, 776, 777], [775, 216, 777, 778], [776, 778, 779, 775], [777, 776, 779, 216], [778, 435, 773, 216, 777], [149, 150, 161, 781], [780, 164, 152], [783, 786, 147], [782, 784, 786, 148], [783, 785, 786, 149], [784, 786, 147], [785, 782, 784, 783], [319, 222, 788], [787, 317, 316, 789], [788, 790], [789, 438, 436, 791], [790, 792], [791, 433, 432], [436, 317], [220, 217, 432], [323], [433, 773, 432, 434], [565, 798, 366], [797, 511, 367], [72, 70, 800], [799, 801], [800, 49, 67], [511, 367, 558], [367, 566, 91], [563, 564, 510], [165, 155], [112, 807], [806, 492, 110], [110, 809, 811], [808, 111, 810, 97], [809, 528, 527, 98], [808, 812], [811, 96, 97], [723], [156, 155]];
  NodeCount   := Length(Graph.Nodes);
  InFocus     := High(Graph.Nodes);

  WorldImg.Init(client.GetMBitmaps);
  WorldImg.LoadFromFile(MAP_PATH);
  SlackGUI.Show();
  WorldImg.Free();
end.
